#__________________________________________________
# Tolerance value for testings 
EPSILON = $EPSILON$

#__________________________________________________
# Output directory
outputDir = $outputDir$

#__________________________________________________
# Dynamics / Boundaries parameters

# Space / Time disretization
M = $M$
N = $N$
P = $P$

# dynamics type
# 0 -> normal dynamics (requires spatial boundary conditions)
# 1 -> normal dynamics with 0 spatial boundary conditions
# 2 -> no spatial boundary conditions
# 3 -> normal dynamics with a reservoir (for adr)
# 4 -> normal dynamics with a reservoir (for adr3)
dynamics = $dynamics$

# boundary type
# 0 -> from file (requires existing files)
# 1 to 6 -> default configuration (see init/ for more information)
boundaryType = 0

# normalization
# -1 -> no normalization
#  0 -> correct mass default by rescaling f1
#  1 -> correct mass default by making mass exiting leftward and rightward
normType = $normType$

#__________________________________________________
# Files for boundaryType = 0
filef0 = $filef0$
filef1 = $filef1$

#__________________________________________________
# Algorithm parameters
algoName   = $algoName$
iterTarget = $iterTarget$
nModPrint  = $nModPrint$
nModWrite  = $nModWrite$

# for adr algorithm
gamma = $gamma$
alpha = $alpha$

# for pd algorithm
theta = $theta$
sigma = $sigma$
tau   = $tau$

# for adr3 algorithm
gamma3 = $gamma3$
alpha3 = $alpha3$
omega1 = $omega1$
omega2 = $omega2$
omega3 = $omega3$

#__________________________________________________
# Initial condition
# 0 -> default initial condition
# 1 -> tries to catch initial condition from the result of a previous simulation, stored in outputDir
# 2 -> tries to catch initial condition from the result of an other simulation, for which results are stored in initialInputDir
# 3 -> 1 & 2 (searches in outputDir first)
initial = $initial$

# for initial = 2 or 3
initialInputDir = $initialID$